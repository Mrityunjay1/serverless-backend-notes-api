service: serverless-notes-api

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    NOTES_TABLE: notes-${self:provider.stage}
    USERS_TABLE: users-${self:provider.stage}
    JWT_SECRET: your-secret-key-change-this-in-production
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "*"

functions:
  signup:
    handler: src/auth/signup.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  login:
    handler: src/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  createNote:
    handler: src/notes/create.handler
    events:
      - http:
          path: notes
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false
       
          

  getNotes:
    handler: src/notes/list.handler
    events:
      - http:
          path: notes
          method: get
          cors: true
          

  getNote:
    handler: src/notes/get.handler
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: verifyToken

  updateNote:
    handler: src/notes/update.handler
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
         

  deleteNote:
    handler: src/notes/delete.handler
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          

  verifyToken:
    handler: src/auth/verify.handler

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline