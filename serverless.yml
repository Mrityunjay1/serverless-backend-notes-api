service: serverless-notes-app

frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    NOTES_TABLE: ${self:service}-${sls:stage}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

functions:
  signup:
    handler: src/auth/signup.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  login:
    handler: src/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  createNote:
    handler: src/handlers/createNote.handler
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatementsName: ${self:service}-createNote-${sls:stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NotesTable.Arn

  getNotes:
    handler: src/handlers/getNotes.handler
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatementsName: ${self:service}-getNotes-${sls:stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - !GetAtt NotesTable.Arn
          - !Join ['', [!GetAtt NotesTable.Arn, '/index/UserIdIndex']]

  getNote:
    handler: src/handlers/getNote.handler
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatementsName: ${self:service}-getNote-${sls:stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt NotesTable.Arn

  updateNote:
    handler: src/handlers/updateNote.handler
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatementsName: ${self:service}-updateNote-${sls:stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt NotesTable.Arn

  deleteNote:
    handler: src/handlers/deleteNote.handler
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatementsName: ${self:service}-deleteNote-${sls:stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: !GetAtt NotesTable.Arn

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST